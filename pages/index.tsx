import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { LockClosedIcon } from '@heroicons/react/24/solid'
import { useEffect, useState } from 'react'
import clsx from 'clsx'
import { useAuth } from '@/contexts/auth'
import { useRouter } from 'next/router'
import { AuthError, createUserWithEmailAndPassword, signInWithEmailAndPassword } from "firebase/auth";
import { auth } from '@/firebase'


const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [activeForm, setActiveForm] = useState<"login" | "register">("login")

  const { user, profile, loading } = useAuth()

  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")

  const [isLoading, setIsLoading] = useState(false)

  const router = useRouter()

  const setRegisterAsActive = () => {
    setActiveForm("register")
  }

  const setLoginAsActive = () => {
    setActiveForm("login")
  }

  const login = () => {
    console.log("Login")
    setIsLoading(true)
    signInWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        // Signed in 
        const user = userCredential.user;
        alert("Sign in As : " + user.uid)
        router.push("/app")
        setIsLoading(false)
        // ...
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        alert(errorMessage)
        setIsLoading(false)

        // ..
      });
  }

  const register = () => {
    console.log("register")
    if(password!==confirmPassword){
      alert("The two password dont match")
      return 
    }
    setIsLoading(true)
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        // Signed in 
        const user = userCredential.user;
        alert("Successfully created the user")

        setIsLoading(false)
        // ...
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        alert(errorMessage)
        setIsLoading(false)
        // ..
      });

  }


  useEffect(() => {
    if (user && profile) {
      router.push("/app")
    }
    if (user && !profile && !loading) {
      router.push("/create-profile")
    } else {

    }
  }, [user, profile,router])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="w-full max-w-md space-y-8">
          <div>

            <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
              Sign in to your account
            </h2>

            {activeForm === "login" ?
              <div>

                <p className="mt-2 text-center text-sm text-gray-600">
                  Do not have an account yet?{' '}
                  <button
                    onClick={setRegisterAsActive}
                    className="font-medium text-indigo-600 hover:text-indigo-500">
                    Create account
                  </button>
                </p>
              </div>
              :

              <div>
                <p className="mt-2 text-center text-sm text-gray-600">
                  Already have an account ? {' '}
                  <button
                    onClick={setLoginAsActive}
                    className="font-medium text-indigo-600 hover:text-indigo-500">
                    Sign In
                  </button>
                </p>
              </div>
            }

          </div>
          <div className="mt-8 space-y-6">
            <input type="hidden" name="remember" defaultValue="true" />
            <div className="space-y-2 shadow-sm">
              <div>
                <label htmlFor="email-address" className="">
                  Email address
                </label>
                <input
                  id="email-address"
                  name="email"
                  type="email"
                  required
                  className="relative block w-full appearance-none rounded-none  border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                  placeholder="Email address"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              <div>
                <label htmlFor="password" className="">
                  Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  className={
                    clsx("relative block w-full appearance-none rounded-none border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm",
                      // activeForm === "register" && "rounded-none"
                    )
                  }
                  placeholder="Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
              </div>

              {activeForm === "register" &&
                <div>
                  <label htmlFor="confirm_password" className="-">
                    Confirm Password
                  </label>
                  <input
                    id="confirm_password"
                    name="confirm_password"
                    type="password"
                    required
                    className="relative block w-full appearance-none rounded-none border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    placeholder="Confirm Password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                  />
                </div>
              }


            </div>

            <div>
              <button
                className={
                  clsx("group relative flex w-full justify-center  border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2",
                    isLoading ? "bg-indigo-300" : "")
                }
                onClick={
                  activeForm === "login" ?
                    login
                    :
                    register
                }
                disabled={isLoading}
              >
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <LockClosedIcon className="h-5 w-5 text-indigo-500 group-hover:text-indigo-400" aria-hidden="true" />
                </span>

                {activeForm === "login" ?
                  <>
                    {isLoading ? "Logging in..." : "Sign in"}
                  </>
                  :
                  <>
                    {isLoading ? "Creating a new user ..." : "Register"}
                  </>
                }

              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}
